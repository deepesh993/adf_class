import unittest
from unittest.mock import patch, MagicMock
import azure.functions as func

from main import main
from helpers import configdb, config
from azure.identity import DefaultAzureCredential
from azure.cosmos import CosmosClient


class TestCreateCosmosContainer(unittest.TestCase):

    @patch('main.ConfigDb')
    @patch('main.CosmosClient')
    @patch('main.DefaultAzureCredential')
    @patch('main.AppConfig')
    def test_main_success(self, mock_app_config, mock_default_cred, mock_cosmos_client, mock_config_db):
        # Setup
        req = func.HttpRequest(
            method='POST',
            body=b'{ "feed_name": "test_feed" }',
            url='/api/create_cosmos_container'
        )

        mock_config = {
            "account": "fakeaccount",
            "db_name": "test_db"
        }
        mock_config_db.return_value.get_config.return_value = [mock_config]
        mock_app_config.return_value.env_var = "dev"

        mock_cred_instance = MagicMock()
        mock_default_cred.return_value = mock_cred_instance

        mock_cosmos_instance = MagicMock()
        mock_cosmos_client.return_value = mock_cosmos_instance

        mock_db = MagicMock()
        mock_cosmos_instance.get_database_client.return_value = mock_db

        mock_container = MagicMock()
        mock_db.get_container_client.return_value = mock_container
        mock_container.read.side_effect = Exception("Container does not exist")  # Simulate not existing

        mock_db.create_container_if_not_exists.return_value = MagicMock()

        # Execute
        response = main(req)

        # Assert
        self.assertEqual(response.status_code, 200)
        self.assertIn("created successfully", response.get_body().decode())


if __name__ == '__main__':
    unittest.main()
